/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as AuthAuthRouteImport } from './routes/_auth/auth'

const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const AuthAuthRoute = AuthAuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthAuthRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthAuthRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_auth/auth': typeof AuthAuthRoute
  '/_protected/': typeof ProtectedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/'
  id: '__root__' | '/_auth' | '/_protected' | '/_auth/auth' | '/_protected/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_auth/auth': {
      id: '/_auth/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthAuthRoute: typeof AuthAuthRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAuthRoute: AuthAuthRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ProtectedRouteRouteChildren {
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
